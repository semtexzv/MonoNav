var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { useDebouncedCallback } from 'use-debounce';
import autocompletionRequestBuilder from '../helpers/autocompletion-request-builder';
var useFetchSuggestions = function (arg) {
    var autocompletionRequest = arg.autocompletionRequest, debounce = arg.debounce, minLengthAutocomplete = arg.minLengthAutocomplete, placesService = arg.placesService, sessionToken = arg.sessionToken, withSessionToken = arg.withSessionToken;
    var fetchSuggestions = useDebouncedCallback(function (value, cb) {
        if (!placesService)
            return cb([]);
        if (value.length < minLengthAutocomplete)
            return cb([]);
        var autocompletionReq = __assign({}, autocompletionRequest);
        placesService.getPlacePredictions(autocompletionRequestBuilder(autocompletionReq, value, withSessionToken && sessionToken), function (suggestions) {
            cb((suggestions || []).map(function (suggestion) { return ({ label: suggestion.description, value: suggestion }); }));
        });
    }, debounce)[0];
    return fetchSuggestions;
};
export default useFetchSuggestions;
//# sourceMappingURL=use-fetch-suggestions.js.map